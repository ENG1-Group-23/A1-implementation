@startuml
'https://plantuml.com/class-diagram

/'package java {
    class Integer
    class Exception
    class Float
    class String
    class Runnable
    interface Map
    interface List
}

package libgdx {
    class TiledMap
    class SpriteBatch
    class OrthogonalTiledMapRenderer
    class Vector2
    class OrthographicCamera
    class Texture
    class Body
    class Sprite
    class World
    class Disposable
}'/

package scene {
    interface Drawable {
        +dispose()
        +render()
    }

    class InvalidAreaException {
        +InvalidAreaException(message : String)
    }

    class AreaFactory {
        metricController : MetricController
        playScreen : PlayScreen

        +createOutdoorMap() : Area
        +createPiazzaMap() : Area
        +createCSMap() : Area
        +createBedroomMap() : Area
        +AreaFactory(metricController : MetricController, playScreen : PlayScreen)
    }

    class GameMap {
        tiledMap : TiledMap
        renderer : OrthogonalTiledMapRenderer
        width : Integer
        height : Integer

        getBorderObjects() : RectangleMapObject[0..*]
        scale(value : Float) : Float
        bound(candidate : Vector2, hGutter : Float, vGutter : Float) : Vector2
        updateView(camera : OrthographicCamera)
        GameMap(mapPath : String)
    }

    class Item {
        texture : Texture
        width : Float
        height : Float
        body : Body

        getPosition() : Vector2
        Item(position : Vector2, texture : Texture, area : Area, width : Float, height : Float)
    }

    class Interactable {
        action : Runnable

        interact()
        isClose(candidate : Vector2) : boolean
        Interactable(position : Vector2, texture : Texture, area : Area, width : Float, height : Float, action : Runnable)
        Interactable(position : Vector2, texture : Texture, area : Area, scale : Float, action : Runnable)
    }

    class Character {
        texture : Texture
        velocity : Vector2
        bodies : Map<AreaName, Body>
        activeBody : Body

        +moveUp()
        +moveDown()
        +moveLeft()
        +moveRight()
        +move()
        +getPosition() : Vector2
        +setPosition(position : Vector2)
        +switchCharacterContext(area : AreaName)
        +Character(areas : Map<AreaName, Area>)
    }

    class Area {
        interactables : List<Interactable>
        world : World
        initialCharacterPosition : Vector2
        map : GameMap

        addInteractable(interactable : Interactable)
        +triggerInteractables(characterPosition : Vector2)
        +bound(candidate : Vector2, hGutter : Float, vGutter : Float) : Vector2
        +updateView(camera : OrthographicCamera)
        +step()
        registerCollisionBody(initialPosition : Vector2, type : BodyType, width : Float, height: Float) : Body
        registerCharacter(width : Float, height : Float) : Body
        +getInitialCharacterPosition() : Vector2
        +setInitialCharacterPosition(position : Vector2)
        generateBorders(borderObjects : RectangleMapObject[0..*])
        Area(mapPath : String, initialCharacterPosition : Vector2)
    }

    'Disposable <|-- Drawable
    Drawable <|.. Area
    Sprite <|-- Character
    Drawable <|.. Character
    Drawable <|.. Item
    Item <|-- Interactable
    'Exception <|-- InvalidAreaException
    Drawable <|.. GameMap
}

package metrics {
    interface MetricListener {
        +updateMetricText(metric : Metric, text : String)
    }

    interface MetricEntry {
        +getValue() : String
    }

    class AreaMetric {
        area : AreaName

        setArea(area : AreaName)
        AreaMetric(initialArea : AreaName)
    }

    enum DayOfWeek {
        Monday
        Tuesday
        Wednesday
        Thursday
        Friday
        Saturday
        Sunday

        DayOfWeek()
    }

    class DOWMetric {
        value : DayOfWeek

        nextDay()
        isFinalDay() : boolean
    }

    class PlayerMetric {
        value : Integer

        incrementMetric(multiplier : Integer)
        decrementMetric(multiplier : Integer)
    }

    class MetricUpdater {
        listener : MetricListener

        +sendUpdate(metric : Metric, value : String)
        +MetricUpdater(listener : MetricListener)
    }

    enum Metric {
        Sleep
        Study
        Eat
        Play
        Area
        Day

        getDisplayName() : String
        Metric(displayName : String)
    }

    class MetricController {
        updateAction : MetricUpdater
        metrics : Map<Metric, MetricEntry>

        getDynamicMetricEntry(type : Class, metric : Metric) : MetricEntry
        +incrementPlayerMetric(metric : Metric, multiplier : Integer)
        +decrementPlayerMetric(metric : Metric, multiplier : Integer)
        +advanceDOWMetric()
        +isFinalDay() : boolean
        +changeAreaMetric(area : AreaName)
        +getMetricStringValue(metric : Metric) : String
        +MetricController(updateAction : MetricUpdater)
    }

    MetricEntry <|.. AreaMetric
    MetricEntry <|.. DOWMetric
    MetricEntry <|.. PlayerMetric
}

package ui {
    abstract class Overlay {
        stage : Stage

        addActor(actor : Actor)
        Overlay(batch : SpriteBatch)
    }

    class HeadsUpDisplay {
        map : Map<Metric, Label>

        addLabel(metric : Metric, table : Table)
        HeadsUpDisplay(batch : SpriteBatch, left : Metric[0..*], right : Metric[0..*])
    }

    class PauseMenu {
        PauseMenu (batch : SpriteBatch)
    }

    class GameOverMenu {
        PauseMenu (batch : SpriteBatch)
    }

    class OverlayFactory {
        batch : SpriteBatch

        +createGameOverMenu() : Overlay
        +createPauseMenu() : Overlay
        +createHUD(left : Metric[0..*], right : Metric[0..*]) : Overlay
        +OverlayFactory(batch : SpriteBatch)
    }

    Overlay <|-- GameOverMenu
    Overlay <|-- HeadsUpDisplay
    Overlay <|-- PauseMenu
    Drawable <|.. Overlay
    MetricListener <|.. HeadsUpDisplay
}

@enduml
